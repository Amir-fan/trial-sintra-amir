import axios from 'axios';
import { Product, SocialMediaPost, ImageInsights } from '../types';

export class OpenAIService {
  private apiKey: string;
  private baseUrl: string = 'https://api.openai.com/v1';

  constructor(apiKey: string) {
    if (!apiKey) {
      console.error('OpenAI API key is missing');
      throw new Error('OpenAI API key is required');
    }
    console.log('OpenAIService initialized with API key:', apiKey.substring(0, 10) + '...');
    this.apiKey = apiKey;
  }

  async generatePosts(prompt: string): Promise<SocialMediaPost[]> {
    try {
      const response = await axios.post(
        `${this.baseUrl}/chat/completions`,
        {
          model: "gpt-4o",
          messages: [
            {
              role: "user",
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 2000
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        }
      );

      const content = response.data.choices[0]?.message?.content;
      if (!content) {
        throw new Error('No content generated by OpenAI');
      }

      return this.parsePostsResponse(content);
    } catch (error) {
      console.error('OpenAI API error:', error);
      throw new Error('Failed to generate posts');
    }
  }

  async analyzeImage(imageBase64: string, mimeType: string): Promise<ImageInsights> {
    try {
      console.log('Starting image analysis with mimeType:', mimeType);
      console.log('Image base64 length:', imageBase64.length);
      
      const response = await axios.post(
        `${this.baseUrl}/chat/completions`,
        {
          model: "gpt-4o",
          messages: [
            {
              role: "user",
              content: [
                {
                  type: "text",
                  text: "Analyze this product image and provide: 1) A brief summary of what you see, 2) 3-5 relevant tags for social media, 3) Alt text for accessibility. Format as JSON: {summary: string, tags: string[], altText: string}"
                },
                {
                  type: "image_url",
                  image_url: {
                    url: `data:${mimeType};base64,${imageBase64}`
                  }
                }
              ]
            }
          ],
          temperature: 0.3,
          max_tokens: 500
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        }
      );

      console.log('OpenAI API response status:', response.status);
      const content = response.data.choices[0]?.message?.content;
      if (!content) {
        console.error('No content in OpenAI response:', response.data);
        throw new Error('No image analysis generated');
      }

      console.log('Image analysis content received:', content.substring(0, 100) + '...');
      return this.parseImageAnalysis(content);
    } catch (error) {
      console.error('Image analysis error details:', {
        message: error instanceof Error ? error.message : 'Unknown error',
        response: error instanceof Error && 'response' in error ? (error as any).response?.data : undefined,
        status: error instanceof Error && 'response' in error ? (error as any).response?.status : undefined
      });
      throw new Error('Failed to analyze image');
    }
  }

  private parsePostsResponse(content: string): SocialMediaPost[] {
    try {
      // Try to parse as JSON first
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        if (parsed.posts && Array.isArray(parsed.posts)) {
          return parsed.posts;
        }
      }

      // Fallback: parse as text
      const lines = content.split('\n').filter(line => line.trim());
      const posts: SocialMediaPost[] = [];
      let currentPost: Partial<SocialMediaPost> = {};

      for (const line of lines) {
        if (line.toLowerCase().includes('twitter') || line.toLowerCase().includes('x')) {
          if (currentPost.platform && currentPost.content) {
            posts.push(currentPost as SocialMediaPost);
          }
          currentPost = { platform: 'twitter', content: '' };
        } else if (line.toLowerCase().includes('instagram')) {
          if (currentPost.platform && currentPost.content) {
            posts.push(currentPost as SocialMediaPost);
          }
          currentPost = { platform: 'instagram', content: '' };
        } else if (line.toLowerCase().includes('linkedin')) {
          if (currentPost.platform && currentPost.content) {
            posts.push(currentPost as SocialMediaPost);
          }
          currentPost = { platform: 'linkedin', content: '' };
        } else if (currentPost.platform && line.trim()) {
          currentPost.content = (currentPost.content + ' ' + line.trim()).trim();
        }
      }

      if (currentPost.platform && currentPost.content) {
        posts.push(currentPost as SocialMediaPost);
      }

      return posts.length > 0 ? posts : this.generateFallbackPosts();
    } catch (error) {
      console.error('Error parsing posts response:', error);
      return this.generateFallbackPosts();
    }
  }

  private parseImageAnalysis(content: string): ImageInsights {
    try {
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          summary: parsed.summary || 'Product image analyzed',
          tags: parsed.tags || ['product', 'image'],
          altText: parsed.altText || 'Product image'
        };
      }

      // Fallback parsing
      return {
        summary: content.substring(0, 200) + '...',
        tags: ['product', 'image', 'analysis'],
        altText: 'Product image'
      };
    } catch (error) {
      console.error('Error parsing image analysis:', error);
      return {
        summary: 'Product image analyzed',
        tags: ['product', 'image'],
        altText: 'Product image'
      };
    }
  }

  private generateFallbackPosts(): SocialMediaPost[] {
    return [
      {
        platform: 'twitter',
        content: 'Check out this amazing product! ðŸš€ #innovation #product'
      },
      {
        platform: 'instagram',
        content: 'âœ¨ New product alert! âœ¨ Swipe to see more details. #product #new'
      },
      {
        platform: 'linkedin',
        content: 'Excited to share our latest product innovation. Learn more in the comments below.'
      }
    ];
  }
}
